<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// water overlay surface.
_waterSurface = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// free surface if it exists.
if(surface_exists(_waterSurface))
    surface_free(_waterSurface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// camera position change.
if(keyboard_check(vk_left))
    view_xview[0] -= 10;
if(keyboard_check(vk_right))
    view_xview[0] += 10;
if(keyboard_check(vk_up))
    view_yview[0] -= 10;
if(keyboard_check(vk_down))
    view_yview[0] += 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialize temporary variables.
var waterPhase, sNormalMap, sReflection, uUvNormalMap, uUvReflection, uNormalsOffset, uRefractSize, uParams, uLight, uScaleNormalMap, uScaleReflection, texNormalMap, texReflection, uvNormalMap, uvReflection;

// create overlay surface if not exists (this is safe-way creation on context lost event).
if(!surface_exists(_waterSurface))
    _waterSurface = surface_create(view_wview[0], view_hview[0]);

// draw all water instances into overlay using water mask sprite.
surface_set_target(_waterSurface);
draw_clear_alpha(c_black, 0.0);
draw_set_blend_mode_ext(bm_src_alpha, bm_one);
with(objWater)
    draw_sprite(sprMask, 0, x - view_xview[0], y - view_yview[0]);
draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha);
surface_reset_target();

// water and light animation phase.
waterPhase = frac(current_time * 0.00005);
lightPhase = degtorad(waterPhase * 360.0 * 4.0);

// obtain textures samplers IDs (a.k.a. texture slots).
sNormalMap = shader_get_sampler_index(fxWater, "sNormalMap");
sReflection = shader_get_sampler_index(fxWater, "sReflection");

// obtain uniforms handlers.
uUvNormalMap = shader_get_uniform(fxWater, "uUvNormalMap");
uUvReflection = shader_get_uniform(fxWater, "uUvReflection");
uNormalsOffset = shader_get_uniform(fxWater, "uNormalsOffset");
uRefractSize = shader_get_uniform(fxWater, "uRefractSize");
uParams = shader_get_uniform(fxWater, "uParams");
uLight = shader_get_uniform(fxWater, "uLight");
uScaleNormalMap = shader_get_uniform(fxWater, "uScaleNormalMap");
uScaleReflection = shader_get_uniform(fxWater, "uScaleReflection");

// get textures and sprites UVs.
texNormalMap = sprite_get_texture(sprNormalMap, 0);
texReflection = sprite_get_texture(sprReflection, 0);
uvNormalMap = sprite_get_uvs(sprNormalMap, 0);
uvReflection = sprite_get_uvs(sprReflection, 0);

// setup shader.
shader_set(fxWater);

// bind textures to given samplers.
texture_set_stage(sNormalMap, texNormalMap);
texture_set_stage(sReflection, texReflection);

// send UVs data to shader program.
shader_set_uniform_f_array(uUvNormalMap, uvNormalMap);
shader_set_uniform_f_array(uUvReflection, uvReflection);

// send water animation offset (values in texture-space coords).
shader_set_uniform_f(uNormalsOffset,
    (view_xview[0] / view_wview[0]) + waterPhase,
    (view_yview[0] / view_hview[0]) + waterPhase
);

// send refraction size (normalized values in texture-space coords).
shader_set_uniform_f(uRefractSize, 48.0 / 512.0, 48.0 / 512.0);

// send miscellaneous parameters.
shader_set_uniform_f(uParams,
    1.0,    // reflection factor; it defines how much reflection will be visible (values in range &lt;0; 1&gt;).
    0.5,    // specular factor; it defines how much extra light will be visible (values in range &lt;0; 1&gt;).
    1000.0, // shine factor; it defines how much extra light will be condensed (values in range &lt;1; +INF&gt;).
    0.9     // alpha factor; it defines how much water will be visible (values in range &lt;0; 1&gt;).
);

// send animated light direction coords.
shader_set_uniform_f(uLight, cos(lightPhase), sin(lightPhase), 1.0);

// send scale factors of normal map and reflection.
shader_set_uniform_f(uScaleNormalMap, 6.0, 6.0);
shader_set_uniform_f(uScaleReflection, 1.0, 1.0);

// draw water surface.
draw_surface(_waterSurface, view_xview[0], view_yview[0]);

// reset to main shader.
shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>320,320</point>
  </PhysicsShapePoints>
</object>
